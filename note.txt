PROJECT PURPOSE:
    Analyze oil well production data over time to do the following:
        - Detect trends or anomalies
        - Calculate KPIs
        - Visualize results for operational insights

FEATURES:

1. Data Input
    - Load well data from CSV or Excel (with columns)
    - Simulate realistic mock data if needed
2. Data Cleaning and Preprocessing
    - Handle missing or negative values
    - Convert date columns, ensure units are consistent
3. Analysis and Calculations
    - Daily/monthly average production
    - Calculate KPIs: water cut, GOR, cumulative production
    - Flag anomalies: sudden drops or spikes
4. Visualization
    - Line charts for prod. rate
    - Bar charts for monthly totals or comparisons by well
    - Cumulative curves or ratio plots
    Cumm Curves:
        / Oil, Gas, and Water should steadily increase or plateau
        / Look for any anomalies (sudden flatlines or jumps that could indicate data entry issues).
        / Flat cumm curves may suggest the well is shut-in, plugged, or under maintenance.
    GOR/WOR Plots:
        / Ensure no spikes cuased by divide-by-zero.
        / GOR typically rises if oil declines faster than gas
        / WOR increases as a reservoir matures and more water breaks through
        / Increasing GOR or WOR can indicate gas coning or water breakthrough which helps in planning artificial lift or shut-in decisions.
        / Comparing GOR/WOR across wells are useful for identifying which wells are maturing faster or underperforming.
5. Output
    - Save results to CSV.
    - Display plots using matplotlib/seaborn


LIST OF FUNCTIONS:
load_file(path)
inpect_file(df)
clean_data(df)
kpis_calculator(df_cleaned)
anomalies_detector(df_cleaned)
anomalies_printer(anomalies)
production_rate_plot(df_cleaned)
monthly_total_production(df_cleaned)
stacked_monthly_production(df_cleaned)
cumulative_and_ratios_plot(df_cleaned)



IMPORTANT PROJECT SYNTAX:
    * Attributes of a certain class do not need brackets whereas Methods require brackets to do something with the class.
    * # As stated in the documentation, the alias for pandas to be used as standard practice is 'pd' while 'np' for numpy ...


FUTURE IMPROVEMENTS (For Syntax and Program Complexity):
1   Handles MemoryError
    Cause: File is too large for RAM.
    Fix: df = pd.read_csv('data/path.csv', dtype={'column1': int32, 'column2': 'category'})
2   Data Ingestion (For High-Level Overview)
    - pulls real-time data from SCADA, PI, or manual inputs.
    - Handles missing values and outliers via interpolation/trimming.
3   Baseline Calculation
    - Computes expected production using historical trends.
    - Adjusts for known events (maintenance, workovers).
4   Threshold Checks
    - Compares live data against absolute, percentage, and statistical limits.
    - Flags deviations that exceed configured tolerances.
5   Alert Prioritization
    - Classifies anomalies as Warning Critical, or Emergency.
    - Suppresses duplicate alerts to avoid alarm fatigue.
6   Coninuous Learning
    - Updates thresholds based on new production trends.
    - Logs false alarms to improve future accuracy.

QUESTIONS:
* How do I know the limits of my program. How much data can it handle? (So I can specify the scope and limitation of my program).


# README PREVIEW HOTKEY:
Ctrl + Shift + V
